// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SoFun
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "api")]
    public partial class NowPlayingFeature : Xunit.IClassFixture<NowPlayingFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "NowPlaying.feature"
#line hidden
        
        public NowPlayingFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Now Playing", "\tPeople all over the world wish to know what movies are playing in their area, an" +
                    "d TMDB is happy \r\n\tto share that information.", ProgrammingLanguage.CSharp, new string[] {
                        "api"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(NowPlayingFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Now Playing")]
        [Xunit.TraitAttribute("Description", "Only friends allowed")]
        [Xunit.InlineDataAttribute("valid", "OK", new string[0])]
        [Xunit.InlineDataAttribute("invalid", "Unauthorized", new string[0])]
        [Xunit.InlineDataAttribute("blank", "Unauthorized", new string[0])]
        public virtual void OnlyFriendsAllowed(string keyType, string response, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Only friends allowed", exampleTags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given(string.Format("I have a {0} api key", keyType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.When("I request the list of movies now playing in the world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then(string.Format("the server responds with {0}", response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="No movies now playing in region", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Now Playing")]
        [Xunit.TraitAttribute("Description", "No movies now playing in region")]
        public virtual void NoMoviesNowPlayingInRegion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No movies now playing in region", new string[] {
                        "ignore"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("no movies are now playing in Peru", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
 testRunner.When("I request the list of movies now playing in Peru", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then("there are 0 total results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Now Playing")]
        [Xunit.TraitAttribute("Description", "Support multiple languages")]
        [Xunit.InlineDataAttribute("US English", "en-US", "Guardians of the Galaxy Vol. 2", "Loneliness Square", new string[0])]
        [Xunit.InlineDataAttribute("French", "fr", "Les Gardiens de la Galaxie Vol. 2", "Plaza de la soledad", new string[0])]
        public virtual void SupportMultipleLanguages(string @case, string language, string title1, string title2, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Support multiple languages", @__tags);
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given(string.Format("my language is {0}", language), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Original Title"});
            table1.AddRow(new string[] {
                        "Guardians of the Galaxy Vol. 2"});
            table1.AddRow(new string[] {
                        "Loneliness Square"});
#line 32
 testRunner.And("the following movies are now playing in Mexico:", ((string)(null)), table1, "And ");
#line 36
 testRunner.When("I request the list of movies now playing in Mexico", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("there are 2 total results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Original Title"});
            table2.AddRow(new string[] {
                        string.Format("{0}", title1),
                        "Guardians of the Galaxy Vol. 2"});
            table2.AddRow(new string[] {
                        string.Format("{0}", title2),
                        "Plaza de la soledad"});
#line 38
 testRunner.And("the following movies are in the list:", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Use pages when many results found", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Now Playing")]
        [Xunit.TraitAttribute("Description", "Use pages when many results found")]
        public virtual void UsePagesWhenManyResultsFound()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use pages when many results found", new string[] {
                        "ignore"});
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("each page has 20 movies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.And("there are 756 movies now playing in the world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.When("I request the list of movies now playing in the world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("there are 756 total results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 54
 testRunner.And("there are 38 total pages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
 testRunner.And("there are 20 movies in the list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Return the requested page\'s list of movies", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Now Playing")]
        [Xunit.TraitAttribute("Description", "Return the requested page\'s list of movies")]
        public virtual void ReturnTheRequestedPageSListOfMovies()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return the requested page\'s list of movies", new string[] {
                        "ignore"});
#line 58
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="English is the default language", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Now Playing")]
        [Xunit.TraitAttribute("Description", "English is the default language")]
        public virtual void EnglishIsTheDefaultLanguage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("English is the default language", new string[] {
                        "ignore"});
#line 62
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Region does not exist", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Now Playing")]
        [Xunit.TraitAttribute("Description", "Region does not exist")]
        public virtual void RegionDoesNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Region does not exist", new string[] {
                        "ignore"});
#line 66
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Page does not exist", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Now Playing")]
        [Xunit.TraitAttribute("Description", "Page does not exist")]
        public virtual void PageDoesNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Page does not exist", new string[] {
                        "ignore"});
#line 70
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Language does not exist", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Now Playing")]
        [Xunit.TraitAttribute("Description", "Language does not exist")]
        public virtual void LanguageDoesNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Language does not exist", new string[] {
                        "ignore"});
#line 74
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                NowPlayingFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                NowPlayingFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
